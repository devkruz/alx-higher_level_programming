===========================
How to Use 0-add_integer.py
===========================

This module defines this function:
``add_integer(a, b=98)``

Usage
=====

``add_integer(..)``:
Returns the sum of the two arguments.


Numbers
=======

``add_integer(..)``:
Returned value is equivalent to using the ``+`` operator.

::

    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(2, 3)
    5

::

    >>> add_integer(2, -3)
    -1

``add_integer(..)``:
The second argument is optional - it defaults value is 98.

::

    >>> add_integer(2)
    100

``add_integer(..)``:
 Works with floating-point values.

::

    >>> add_integer(2.0, 3.0)
    5

::

    >>> add_integer(-2.9, -0.2)
    -2

``add_integer(..)``:
Floating and non-floating point values can be combined.

::

    >>> add_integer(2.3, -3)
    -1


String
======

``add_integer(..)``:
Accept only integers or floats arguments.
Anything else will raise TypeError

::

    >>> add_integer("tony", 71)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(2, "hello")
    Traceback (most recent call last):
    TypeError: b must be an integer

None
====

::

    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(2.3, None)
    Traceback (most recent call last):
    TypeError: b must be an integer

``add_integer(..)``:
The first argument is only needed to raise a TypeError

::

    >>> add_integer("hello", "there")
    Traceback (most recent call last):
    TypeError: a must be an integer

::
